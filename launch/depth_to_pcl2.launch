<launch>

    <!-- <node name="update_frame_id" pkg="depth_image_proc" type="update_frame_id.py" output="screen" /> -->

    <!-- Nodelet manager for this pipeline -->
    <node pkg="nodelet" type="nodelet" args="manager" name="standalone_nodelet" output="screen"/>

    <node pkg="nodelet" type="nodelet" name="downsample_depth" args="standalone image_proc/crop_decimate">
        <param name="decimation_x" type="int" value="2"/>
        <param name="decimation_y" type="int" value="2"/>

        <!-- remap input topics -->
        <remap from="camera/image_raw" to="/zed2/zed_node/depth/depth_registered"/>
        <remap from="camera/image_info" to="/zed2/zed_node/depth/camera_info"/>
        <!-- remap output topics -->
        <remap from="camera_out/image_raw" to="image_depth_in"/>
        <remap from="camera_info" to="depth_camera_info_in"/>
    </node>

    <!-- Convert to point cloud -->
    <node pkg="nodelet" type="nodelet" name="depth_image_proc" args="load depth_image_proc/point_cloud_xyz standalone_nodelet --no-bond">
   
        <!--remap from your specific sensors-->         

        <!-- Input: Camera calibration and metadata.  (sensor_msgs/CameraInfo) -->
        <remap from="camera_info" to="depth_camera_info_in"/>

        <!-- Input: Rectified color image. (sensor_msgs/Image) -->
        <!-- <remap from="rgb/image_rect_color" to="/camera/infra1/image_rect_raw"/> -->

        <!-- Input: Rectified depth image, registered to the RGB camera. (sensor_msgs/Image) -->
        <remap from="image_rect" to="image_depth_in"/>

        <!-- Output: XYZ point cloud. If using PCL, subscribe as PointCloud<PointXYZ>.  (sensor_msgs/PointCloud2)  -->
        <!-- <remap from="depth_registered/points" to="/point_cloud/points"/> -->

    </node>

    <rosparam command="load" file="$(find lane_detect)/config/depth_to_map.yaml" />

    <!-- Load the octomap -->
    <node pkg="octomap_server" type="octomap_server_node" name="octomap_server" output="screen">
        <param name="resolution" value="1" />
        
        <!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
        <param name="frame_id" type="string" value="base_link" />
        
        <!-- maximum range to integrate (speedup!) -->
        <param name="sensor_model/max_range" value="20.0" />
        
        <!-- data source to integrate (PointCloud2) -->
        <remap from="/cloud_in" to="/points" />

    </node>

    <!-- Launch the octomap conversion node -->
    <node pkg="grid_map_demos" type="octomap_to_gridmap_demo" name="octomap_to_gridmap_demo" output="screen" />

    <!-- Launch the grid map visualizer -->
    <node pkg="grid_map_visualization" type="grid_map_visualization" name="grid_map_visualization" output="screen" />

</launch>